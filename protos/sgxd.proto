syntax = "proto3";
option csharp_namespace = "TDCR.CoreLib.Wire.Sgx";
package tdcr.sgxd;

import "google/protobuf/empty.proto";
import "network.proto";
import "dcr.proto";
import "raft.proto";

message SgxConfig {
  message Peer {
    tdcr.network.Uid uid = 1;
    tdcr.network.Uid event  = 2;
    tdcr.network.Addr addr = 3;

  }
  tdcr.network.Uid self = 1;
  tdcr.dcr.Workflow workflow = 2;
  repeated Peer peers = 3;
}

message Snapshot {
  message Local {
    tdcr.network.Uid cluster = 1;
    repeated tdcr.raft.Entry entries = 2;
  }
  repeated Local parts = 1;
}

service SgxDaemon {
  // Confiure the SgxDaemon and start operating
  rpc Config(SgxConfig) returns (google.protobuf.Empty);

  // Stop the SgxDaemon
  rpc Stop(google.protobuf.Empty) returns (google.protobuf.Empty);

  // Send a message to the underlying enclave
  // If target is not configured self, the message is dropped
  rpc Send(tdcr.network.Container) returns (google.protobuf.Empty);

  // Execute a DCR event
  rpc Execute(tdcr.network.Uid) returns (google.protobuf.Empty);

  // Run the cheapshot algorithm from this daemon
  rpc History(google.protobuf.Empty) returns (Snapshot);
}
